{"version":3,"sources":["metric-test.js"],"names":["test","require","sinon","proxyquire","metricFixtures","config","logging","AgentStub","hasMany","spy","type","MetricStub","db","sandbox","typeArgs","where","single","Object","assign","newMetric","value","beforeEach","createSandbox","belongsTo","create","stub","withArgs","returns","Promise","resolve","toJSON","findAll","uuid","byAgentUuid","byType","setupDatabase","afterEach","restore","t","truthy","Metric","serial","true","called","calledWith"],"mappings":"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","file":"metric-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst metricFixtures = require('./fixtures/metric')\n\nlet config = {\n  logging: function () { }\n}\n\nlet AgentStub = {\n  hasMany: sinon.spy()\n}\n\n// Argumentos para testear\nlet type = 'RAM'\nlet MetricStub = null\nlet db = null\nlet sandbox = null\n\nlet typeArgs = {\n  where: { type }\n}\n\nlet single = Object.assign({}, metricFixtures.single) // Creando un objeto metric falso\n\nlet newMetric = {\n  type: 'RAM',\n  value: '60 MB'\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  MetricStub = {\n    belongsTo: sandbox.spy()\n  }\n\n  // Metric Create Stub\n  MetricStub.create = sandbox.stub()\n  MetricStub.create.withArgs(newMetric).returns(Promise.resolve({ toJSON () { return newMetric } }))\n\n  // Metric FindAll Stub\n  MetricStub.findAll = sandbox.stub()\n  MetricStub.findAll.withArgs(AgentStub.uuid).returns(Promise.resolve(metricFixtures.byAgentUuid))\n  MetricStub.findAll.withArgs(typeArgs).returns(Promise.resolve(metricFixtures.byType))\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Metric', t => {\n  t.truthy(db.Metric, 'Metric service should exist')\n})\n\ntest('Agent', t => {\n  t.truthy(db.Metric, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.HasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the Metricmodel')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the Agentmodel')\n})\n\n\n"]}