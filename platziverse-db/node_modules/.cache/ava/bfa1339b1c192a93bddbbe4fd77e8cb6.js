'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');
const sinon = require('sinon');
const proxyquire = require('proxyquire');
const agentFixtures = require('./fixtures/agent');

let config = {
  logging: function () {}
};

let MetricStub = {
  belongsTo: sinon.spy()

  // Argumentos para testear
};let id = 1;
let uuid = 'yyy-yyy-yyy';
let AgentStub = null;
let db = null;
let sandbox = null;

let single = Object.assign({}, agentFixtures.single); // Creando un objeto agent

let connectedArgs = {
  where: { connected: true }
};

let usernameArgs = {
  where: { username: 'miguel', connected: true }
};

let uuidArgs = {
  where: { uuid }
};

let newAgent = {
  uuid: '123-123-123',
  name: 'test',
  username: 'test',
  hostname: 'test',
  pid: 0,
  connected: false
};

test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  AgentStub = {
    hasMany: sandbox.spy()

    // Model Create Stub
  };AgentStub.create = sandbox.stub();
  AgentStub.create.withArgs(newAgent).returns(Promise.resolve({ toJSON() {
      return newAgent;
    } }));

  // Model update Stub
  AgentStub.update = sandbox.stub();
  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single));

  // Model findById Stub
  AgentStub.findById = sandbox.stub();
  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)));

  // Model findOne Stub
  AgentStub.findOne = sandbox.stub();
  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)));

  // Model findAll Stub
  AgentStub.findAll = sandbox.stub();
  AgentStub.findAll.withArgs().returns(Promise.resolve(agentFixtures.all));
  AgentStub.findAll.withArgs(connectedArgs).returns(Promise.resolve(agentFixtures.connected));
  AgentStub.findAll.withArgs(usernameArgs).returns(Promise.resolve(agentFixtures.miguel));
  const setupDatabase = proxyquire('../', {
    './models/agent': () => AgentStub,
    './models/metric': () => MetricStub
  });
  db = await setupDatabase(config);
});

test.afterEach(() => {
  sandbox && sandbox.restore();
});

test('Agent', t => {
  var _rec = new _powerAssertRecorder();

  t.truthy(_rec._expr(_rec._capt(_rec._capt(db, 'arguments/0/object').Agent, 'arguments/0'), {
    content: 't.truthy(db.Agent, \'Agent service should exist\')',
    filepath: 'tests/agent-test.js',
    line: 85,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"Agent","range":[12,17]},"computed":false,"range":[9,17]},{"type":"StringLiteral","value":"Agent service should exist","range":[19,47]}],"range":[0,48]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"Agent","range":[12,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"string"},"value":"Agent service should exist","range":[19,47]},{"type":{"label":")"},"range":[47,48]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Agent service should exist');
});

test.serial('Setup', t => {
  var _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder();

  t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(AgentStub, 'arguments/0/object/object').hasMany, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AgentStub.hasMany.called, \'AgentModel.HasMany was executed\')',
    filepath: 'tests/agent-test.js',
    line: 89,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"hasMany","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"AgentModel.HasMany was executed","range":[33,66]}],"range":[0,67]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"hasMany","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"AgentModel.HasMany was executed","range":[33,66]},{"type":{"label":")"},"range":[66,67]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'AgentModel.HasMany was executed');
  t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(AgentStub, 'arguments/0/callee/object/object').hasMany, 'arguments/0/callee/object').calledWith(_rec3._capt(MetricStub, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AgentStub.hasMany.calledWith(MetricStub), \'Argument should be the Metricmodel\')',
    filepath: 'tests/agent-test.js',
    line: 90,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"hasMany","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledWith","range":[25,35]},"computed":false,"range":[7,35]},"arguments":[{"type":"Identifier","name":"MetricStub","range":[36,46]}],"range":[7,47]},{"type":"StringLiteral","value":"Argument should be the Metricmodel","range":[49,85]}],"range":[0,86]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"hasMany","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledWith","range":[25,35]},{"type":{"label":"("},"range":[35,36]},{"type":{"label":"name"},"value":"MetricStub","range":[36,46]},{"type":{"label":")"},"range":[46,47]},{"type":{"label":","},"range":[47,48]},{"type":{"label":"string"},"value":"Argument should be the Metricmodel","range":[49,85]},{"type":{"label":")"},"range":[85,86]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument should be the Metricmodel');
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(MetricStub, 'arguments/0/object/object').belongsTo, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(MetricStub.belongsTo.called, \'MetricModel.belongsTo was executed\')',
    filepath: 'tests/agent-test.js',
    line: 91,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"belongsTo","range":[18,27]},"computed":false,"range":[7,27]},"property":{"type":"Identifier","name":"called","range":[28,34]},"computed":false,"range":[7,34]},{"type":"StringLiteral","value":"MetricModel.belongsTo was executed","range":[36,72]}],"range":[0,73]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"belongsTo","range":[18,27]},{"type":{"label":"."},"range":[27,28]},{"type":{"label":"name"},"value":"called","range":[28,34]},{"type":{"label":","},"range":[34,35]},{"type":{"label":"string"},"value":"MetricModel.belongsTo was executed","range":[36,72]},{"type":{"label":")"},"range":[72,73]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'MetricModel.belongsTo was executed');
  t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(MetricStub, 'arguments/0/callee/object/object').belongsTo, 'arguments/0/callee/object').calledWith(_rec5._capt(AgentStub, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(MetricStub.belongsTo.calledWith(AgentStub), \'Argument should be the Agentmodel\')',
    filepath: 'tests/agent-test.js',
    line: 92,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"belongsTo","range":[18,27]},"computed":false,"range":[7,27]},"property":{"type":"Identifier","name":"calledWith","range":[28,38]},"computed":false,"range":[7,38]},"arguments":[{"type":"Identifier","name":"AgentStub","range":[39,48]}],"range":[7,49]},{"type":"StringLiteral","value":"Argument should be the Agentmodel","range":[51,86]}],"range":[0,87]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"belongsTo","range":[18,27]},{"type":{"label":"."},"range":[27,28]},{"type":{"label":"name"},"value":"calledWith","range":[28,38]},{"type":{"label":"("},"range":[38,39]},{"type":{"label":"name"},"value":"AgentStub","range":[39,48]},{"type":{"label":")"},"range":[48,49]},{"type":{"label":","},"range":[49,50]},{"type":{"label":"string"},"value":"Argument should be the Agentmodel","range":[51,86]},{"type":{"label":")"},"range":[86,87]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument should be the Agentmodel');
});

test.serial('Agent#createOrUpdate - exists', async t => {
  var _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder();

  let agent = await db.Agent.createOrUpdate(single);

  t.true(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(AgentStub, 'arguments/0/object/object').findOne, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AgentStub.findOne.called, \'findOne should be called on model\')',
    filepath: 'tests/agent-test.js',
    line: 98,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findOne","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"findOne should be called on model","range":[33,68]}],"range":[0,69]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findOne","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"findOne should be called on model","range":[33,68]},{"type":{"label":")"},"range":[68,69]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called on model');
  t.true(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(AgentStub, 'arguments/0/object/object').findOne, 'arguments/0/object').calledTwice, 'arguments/0'), {
    content: 't.true(AgentStub.findOne.calledTwice, \'findOne should be called twice\')',
    filepath: 'tests/agent-test.js',
    line: 99,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findOne","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledTwice","range":[25,36]},"computed":false,"range":[7,36]},{"type":"StringLiteral","value":"findOne should be called twice","range":[38,70]}],"range":[0,71]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findOne","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledTwice","range":[25,36]},{"type":{"label":","},"range":[36,37]},{"type":{"label":"string"},"value":"findOne should be called twice","range":[38,70]},{"type":{"label":")"},"range":[70,71]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called twice');
  t.true(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(AgentStub, 'arguments/0/object/object').update, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AgentStub.update.calledOnce, \'update should be called once\')',
    filepath: 'tests/agent-test.js',
    line: 100,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"update","range":[17,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledOnce","range":[24,34]},"computed":false,"range":[7,34]},{"type":"StringLiteral","value":"update should be called once","range":[36,66]}],"range":[0,67]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"update","range":[17,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledOnce","range":[24,34]},{"type":{"label":","},"range":[34,35]},{"type":{"label":"string"},"value":"update should be called once","range":[36,66]},{"type":{"label":")"},"range":[66,67]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'update should be called once');

  t.deepEqual(agent, single, 'agent should be the same');
});

test.serial('Agent#createOrUpdate - new', async t => {
  var _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder(),
      _rec14 = new _powerAssertRecorder();

  let agent = await db.Agent.createOrUpdate(newAgent);

  // Validación de condiciones en la función
  t.true(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(AgentStub, 'arguments/0/object/object').findOne, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AgentStub.findOne.called, \'findOne should be called on model\')',
    filepath: 'tests/agent-test.js',
    line: 109,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findOne","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"findOne should be called on model","range":[33,68]}],"range":[0,69]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findOne","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"findOne should be called on model","range":[33,68]},{"type":{"label":")"},"range":[68,69]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called on model'); // El metodo findOne debe ser llamado en el modelo
  t.true(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(AgentStub, 'arguments/0/object/object').findOne, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AgentStub.findOne.calledOnce, \'findOne should be called once\')',
    filepath: 'tests/agent-test.js',
    line: 110,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findOne","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledOnce","range":[25,35]},"computed":false,"range":[7,35]},{"type":"StringLiteral","value":"findOne should be called once","range":[37,68]}],"range":[0,69]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findOne","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledOnce","range":[25,35]},{"type":{"label":","},"range":[35,36]},{"type":{"label":"string"},"value":"findOne should be called once","range":[37,68]},{"type":{"label":")"},"range":[68,69]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called once'); // El metodo findOne debe ser llamado una vez
  t.true(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(AgentStub, 'arguments/0/callee/object/object').findOne, 'arguments/0/callee/object').calledWith(_rec11._capt({
    where: _rec11._capt({ uuid: _rec11._capt(_rec11._capt(newAgent, 'arguments/0/arguments/0/properties/0/value/properties/0/value/object').uuid, 'arguments/0/arguments/0/properties/0/value/properties/0/value') }, 'arguments/0/arguments/0/properties/0/value')
  }, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AgentStub.findOne.calledWith({ where: { uuid: newAgent.uuid } }), \'findOne should be called with uuid args\')',
    filepath: 'tests/agent-test.js',
    line: 111,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findOne","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledWith","range":[25,35]},"computed":false,"range":[7,35]},"arguments":[{"type":"ObjectExpression","properties":[{"type":"ObjectProperty","key":{"type":"Identifier","name":"where","range":[38,43]},"value":{"type":"ObjectExpression","properties":[{"type":"ObjectProperty","key":{"type":"Identifier","name":"uuid","range":[47,51]},"value":{"type":"MemberExpression","object":{"type":"Identifier","name":"newAgent","range":[53,61]},"property":{"type":"Identifier","name":"uuid","range":[62,66]},"computed":false,"range":[53,66]},"computed":false,"shorthand":false,"range":[47,66]}],"range":[45,68]},"computed":false,"shorthand":false,"range":[38,68]}],"range":[36,70]}],"range":[7,71]},{"type":"StringLiteral","value":"findOne should be called with uuid args","range":[73,114]}],"range":[0,115]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findOne","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledWith","range":[25,35]},{"type":{"label":"("},"range":[35,36]},{"type":{"label":"{"},"range":[36,37]},{"type":{"label":"name"},"value":"where","range":[38,43]},{"type":{"label":":"},"range":[43,44]},{"type":{"label":"{"},"range":[45,46]},{"type":{"label":"name"},"value":"uuid","range":[47,51]},{"type":{"label":":"},"range":[51,52]},{"type":{"label":"name"},"value":"newAgent","range":[53,61]},{"type":{"label":"."},"range":[61,62]},{"type":{"label":"name"},"value":"uuid","range":[62,66]},{"type":{"label":"}"},"range":[67,68]},{"type":{"label":"}"},"range":[69,70]},{"type":{"label":")"},"range":[70,71]},{"type":{"label":","},"range":[71,72]},{"type":{"label":"string"},"value":"findOne should be called with uuid args","range":[73,114]},{"type":{"label":")"},"range":[114,115]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with uuid args'); // El metodo findOne debe ser llamado con los argumentos de uuid
  t.true(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(AgentStub, 'arguments/0/object/object').create, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AgentStub.create.called, \'create should be called on model\')',
    filepath: 'tests/agent-test.js',
    line: 114,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"create","range":[17,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"called","range":[24,30]},"computed":false,"range":[7,30]},{"type":"StringLiteral","value":"create should be called on model","range":[32,66]}],"range":[0,67]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"create","range":[17,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"called","range":[24,30]},{"type":{"label":","},"range":[30,31]},{"type":{"label":"string"},"value":"create should be called on model","range":[32,66]},{"type":{"label":")"},"range":[66,67]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called on model'); // El metodo create debe ser llamado en el modelo
  t.true(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(AgentStub, 'arguments/0/object/object').create, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AgentStub.create.calledOnce, \'create should be called once\')',
    filepath: 'tests/agent-test.js',
    line: 115,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"create","range":[17,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledOnce","range":[24,34]},"computed":false,"range":[7,34]},{"type":"StringLiteral","value":"create should be called once","range":[36,66]}],"range":[0,67]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"create","range":[17,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledOnce","range":[24,34]},{"type":{"label":","},"range":[34,35]},{"type":{"label":"string"},"value":"create should be called once","range":[36,66]},{"type":{"label":")"},"range":[66,67]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called once'); // El metodo create debe ser llamado una vez
  t.true(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(AgentStub, 'arguments/0/callee/object/object').create, 'arguments/0/callee/object').calledWith(_rec14._capt(newAgent, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AgentStub.create.calledWith(newAgent), \'create should be called with args newAgent\')',
    filepath: 'tests/agent-test.js',
    line: 116,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"create","range":[17,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledWith","range":[24,34]},"computed":false,"range":[7,34]},"arguments":[{"type":"Identifier","name":"newAgent","range":[35,43]}],"range":[7,44]},{"type":"StringLiteral","value":"create should be called with args newAgent","range":[46,90]}],"range":[0,91]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"create","range":[17,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledWith","range":[24,34]},{"type":{"label":"("},"range":[34,35]},{"type":{"label":"name"},"value":"newAgent","range":[35,43]},{"type":{"label":")"},"range":[43,44]},{"type":{"label":","},"range":[44,45]},{"type":{"label":"string"},"value":"create should be called with args newAgent","range":[46,90]},{"type":{"label":")"},"range":[90,91]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called with args newAgent'); // El metodo create fue llamado con los argumentos de newAgent

  t.deepEqual(agent, newAgent, 'agent should be the same'); // El agente debe ser el mismo
});

test.serial('Agent#findById', async t => {
  var _rec15 = new _powerAssertRecorder(),
      _rec16 = new _powerAssertRecorder(),
      _rec17 = new _powerAssertRecorder();

  let agent = await db.Agent.findById(id);

  t.true(_rec15._expr(_rec15._capt(_rec15._capt(_rec15._capt(AgentStub, 'arguments/0/object/object').findById, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AgentStub.findById.called, \'findById should be called on model\')',
    filepath: 'tests/agent-test.js',
    line: 124,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findById","range":[17,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"called","range":[26,32]},"computed":false,"range":[7,32]},{"type":"StringLiteral","value":"findById should be called on model","range":[34,70]}],"range":[0,71]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findById","range":[17,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"called","range":[26,32]},{"type":{"label":","},"range":[32,33]},{"type":{"label":"string"},"value":"findById should be called on model","range":[34,70]},{"type":{"label":")"},"range":[70,71]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findById should be called on model');
  t.true(_rec16._expr(_rec16._capt(_rec16._capt(_rec16._capt(AgentStub, 'arguments/0/object/object').findById, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AgentStub.findById.calledOnce, \'findById should be called once\')',
    filepath: 'tests/agent-test.js',
    line: 125,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findById","range":[17,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"calledOnce","range":[26,36]},"computed":false,"range":[7,36]},{"type":"StringLiteral","value":"findById should be called once","range":[38,70]}],"range":[0,71]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findById","range":[17,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"calledOnce","range":[26,36]},{"type":{"label":","},"range":[36,37]},{"type":{"label":"string"},"value":"findById should be called once","range":[38,70]},{"type":{"label":")"},"range":[70,71]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findById should be called once');
  t.true(_rec17._expr(_rec17._capt(_rec17._capt(_rec17._capt(AgentStub, 'arguments/0/callee/object/object').findById, 'arguments/0/callee/object').calledWith(_rec17._capt(id, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AgentStub.findById.calledWith(id), \'findById should be called with specified id\')',
    filepath: 'tests/agent-test.js',
    line: 126,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findById","range":[17,25]},"computed":false,"range":[7,25]},"property":{"type":"Identifier","name":"calledWith","range":[26,36]},"computed":false,"range":[7,36]},"arguments":[{"type":"Identifier","name":"id","range":[37,39]}],"range":[7,40]},{"type":"StringLiteral","value":"findById should be called with specified id","range":[42,87]}],"range":[0,88]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findById","range":[17,25]},{"type":{"label":"."},"range":[25,26]},{"type":{"label":"name"},"value":"calledWith","range":[26,36]},{"type":{"label":"("},"range":[36,37]},{"type":{"label":"name"},"value":"id","range":[37,39]},{"type":{"label":")"},"range":[39,40]},{"type":{"label":","},"range":[40,41]},{"type":{"label":"string"},"value":"findById should be called with specified id","range":[42,87]},{"type":{"label":")"},"range":[87,88]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findById should be called with specified id');

  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same');
});

test.serial('Agent#findByUuid', async t => {
  var _rec18 = new _powerAssertRecorder(),
      _rec19 = new _powerAssertRecorder(),
      _rec20 = new _powerAssertRecorder();

  let agent = await db.Agent.findByUuid(uuidArgs);

  t.true(_rec18._expr(_rec18._capt(_rec18._capt(_rec18._capt(AgentStub, 'arguments/0/object/object').findOne, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AgentStub.findOne.called, \'findOne should be called on model\')',
    filepath: 'tests/agent-test.js',
    line: 134,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findOne","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"findOne should be called on model","range":[33,68]}],"range":[0,69]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findOne","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"findOne should be called on model","range":[33,68]},{"type":{"label":")"},"range":[68,69]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called on model');
  t.true(_rec19._expr(_rec19._capt(_rec19._capt(_rec19._capt(AgentStub, 'arguments/0/object/object').findOne, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AgentStub.findOne.calledOnce, \'findOne should be called once\')',
    filepath: 'tests/agent-test.js',
    line: 135,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findOne","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledOnce","range":[25,35]},"computed":false,"range":[7,35]},{"type":"StringLiteral","value":"findOne should be called once","range":[37,68]}],"range":[0,69]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findOne","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledOnce","range":[25,35]},{"type":{"label":","},"range":[35,36]},{"type":{"label":"string"},"value":"findOne should be called once","range":[37,68]},{"type":{"label":")"},"range":[68,69]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called once');
  t.true(_rec20._expr(_rec20._capt(_rec20._capt(_rec20._capt(AgentStub, 'arguments/0/callee/object/object').findOne, 'arguments/0/callee/object').calledWith(_rec20._capt(uuidArgs, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AgentStub.findOne.calledWith(uuidArgs), \'findOne should be called with uuidArgs\')',
    filepath: 'tests/agent-test.js',
    line: 136,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findOne","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledWith","range":[25,35]},"computed":false,"range":[7,35]},"arguments":[{"type":"Identifier","name":"uuidArgs","range":[36,44]}],"range":[7,45]},{"type":"StringLiteral","value":"findOne should be called with uuidArgs","range":[47,87]}],"range":[0,88]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findOne","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledWith","range":[25,35]},{"type":{"label":"("},"range":[35,36]},{"type":{"label":"name"},"value":"uuidArgs","range":[36,44]},{"type":{"label":")"},"range":[44,45]},{"type":{"label":","},"range":[45,46]},{"type":{"label":"string"},"value":"findOne should be called with uuidArgs","range":[47,87]},{"type":{"label":")"},"range":[87,88]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with uuidArgs');

  t.deepEqual(agent, agentFixtures.byUuid(uuidArgs), 'should be the same');
});

test.serial('Agent#findAll', async t => {
  var _rec21 = new _powerAssertRecorder(),
      _rec22 = new _powerAssertRecorder(),
      _rec23 = new _powerAssertRecorder();

  let agents = await db.Agent.findAll();

  t.true(_rec21._expr(_rec21._capt(_rec21._capt(_rec21._capt(AgentStub, 'arguments/0/object/object').findAll, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AgentStub.findAll.called, \'findAll should be called on model\')',
    filepath: 'tests/agent-test.js',
    line: 144,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findAll","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"findAll should be called on model","range":[33,68]}],"range":[0,69]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findAll","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"findAll should be called on model","range":[33,68]},{"type":{"label":")"},"range":[68,69]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called on model');
  t.true(_rec22._expr(_rec22._capt(_rec22._capt(_rec22._capt(AgentStub, 'arguments/0/object/object').findAll, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AgentStub.findAll.calledOnce, \'findAll should be called once\')',
    filepath: 'tests/agent-test.js',
    line: 145,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findAll","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledOnce","range":[25,35]},"computed":false,"range":[7,35]},{"type":"StringLiteral","value":"findAll should be called once","range":[37,68]}],"range":[0,69]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findAll","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledOnce","range":[25,35]},{"type":{"label":","},"range":[35,36]},{"type":{"label":"string"},"value":"findAll should be called once","range":[37,68]},{"type":{"label":")"},"range":[68,69]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called once');
  t.true(_rec23._expr(_rec23._capt(_rec23._capt(_rec23._capt(AgentStub, 'arguments/0/callee/object/object').findAll, 'arguments/0/callee/object').calledWith(), 'arguments/0'), {
    content: 't.true(AgentStub.findAll.calledWith(), \'findAll should be called with args\')',
    filepath: 'tests/agent-test.js',
    line: 146,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findAll","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledWith","range":[25,35]},"computed":false,"range":[7,35]},"arguments":[],"range":[7,37]},{"type":"StringLiteral","value":"findAll should be called with args","range":[39,75]}],"range":[0,76]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findAll","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledWith","range":[25,35]},{"type":{"label":"("},"range":[35,36]},{"type":{"label":")"},"range":[36,37]},{"type":{"label":","},"range":[37,38]},{"type":{"label":"string"},"value":"findAll should be called with args","range":[39,75]},{"type":{"label":")"},"range":[75,76]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called with args');

  t.is(agents.length, agentFixtures.all.length, 'agents should be the same');
  t.deepEqual(agents, agentFixtures.all, 'agents should be the same');
});

test.serial('Agent#findConnected', async t => {
  var _rec24 = new _powerAssertRecorder(),
      _rec25 = new _powerAssertRecorder(),
      _rec26 = new _powerAssertRecorder();

  let agents = await db.Agent.findConnected();

  t.true(_rec24._expr(_rec24._capt(_rec24._capt(_rec24._capt(AgentStub, 'arguments/0/object/object').findAll, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AgentStub.findAll.called, \'findAll should be called on model\')',
    filepath: 'tests/agent-test.js',
    line: 155,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findAll","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"findAll should be called on model","range":[33,68]}],"range":[0,69]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findAll","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"findAll should be called on model","range":[33,68]},{"type":{"label":")"},"range":[68,69]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called on model');
  t.true(_rec25._expr(_rec25._capt(_rec25._capt(_rec25._capt(AgentStub, 'arguments/0/object/object').findAll, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AgentStub.findAll.calledOnce, \'findAll should be called once\')',
    filepath: 'tests/agent-test.js',
    line: 156,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findAll","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledOnce","range":[25,35]},"computed":false,"range":[7,35]},{"type":"StringLiteral","value":"findAll should be called once","range":[37,68]}],"range":[0,69]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findAll","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledOnce","range":[25,35]},{"type":{"label":","},"range":[35,36]},{"type":{"label":"string"},"value":"findAll should be called once","range":[37,68]},{"type":{"label":")"},"range":[68,69]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called once');
  t.true(_rec26._expr(_rec26._capt(_rec26._capt(_rec26._capt(AgentStub, 'arguments/0/callee/object/object').findAll, 'arguments/0/callee/object').calledWith(_rec26._capt(connectedArgs, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AgentStub.findAll.calledWith(connectedArgs), \'findAll should be called with connectedArgs\')',
    filepath: 'tests/agent-test.js',
    line: 157,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findAll","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledWith","range":[25,35]},"computed":false,"range":[7,35]},"arguments":[{"type":"Identifier","name":"connectedArgs","range":[36,49]}],"range":[7,50]},{"type":"StringLiteral","value":"findAll should be called with connectedArgs","range":[52,97]}],"range":[0,98]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findAll","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledWith","range":[25,35]},{"type":{"label":"("},"range":[35,36]},{"type":{"label":"name"},"value":"connectedArgs","range":[36,49]},{"type":{"label":")"},"range":[49,50]},{"type":{"label":","},"range":[50,51]},{"type":{"label":"string"},"value":"findAll should be called with connectedArgs","range":[52,97]},{"type":{"label":")"},"range":[97,98]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called with connectedArgs');

  t.is(agents.length, agentFixtures.connected.length, 'agents should be the same');
  t.deepEqual(agents, agentFixtures.connected, 'agents should be the same');
});

test.serial('Agent#findByUsername', async t => {
  var _rec27 = new _powerAssertRecorder(),
      _rec28 = new _powerAssertRecorder(),
      _rec29 = new _powerAssertRecorder();

  let agents = await db.Agent.findByUsername('miguel');

  t.true(_rec27._expr(_rec27._capt(_rec27._capt(_rec27._capt(AgentStub, 'arguments/0/object/object').findAll, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AgentStub.findAll.called, \'findAll should be called on model\')',
    filepath: 'tests/agent-test.js',
    line: 166,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findAll","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"findAll should be called on model","range":[33,68]}],"range":[0,69]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findAll","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"findAll should be called on model","range":[33,68]},{"type":{"label":")"},"range":[68,69]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called on model');
  t.true(_rec28._expr(_rec28._capt(_rec28._capt(_rec28._capt(AgentStub, 'arguments/0/object/object').findAll, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AgentStub.findAll.calledOnce, \'findAll should be called once\')',
    filepath: 'tests/agent-test.js',
    line: 167,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findAll","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledOnce","range":[25,35]},"computed":false,"range":[7,35]},{"type":"StringLiteral","value":"findAll should be called once","range":[37,68]}],"range":[0,69]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findAll","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledOnce","range":[25,35]},{"type":{"label":","},"range":[35,36]},{"type":{"label":"string"},"value":"findAll should be called once","range":[37,68]},{"type":{"label":")"},"range":[68,69]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called once');
  t.true(_rec29._expr(_rec29._capt(_rec29._capt(_rec29._capt(AgentStub, 'arguments/0/callee/object/object').findAll, 'arguments/0/callee/object').calledwith('miguel'), 'arguments/0'), {
    content: 't.true(AgentStub.findAll.calledwith(\'miguel\'), \'findAll should be called with usernameArgs\')',
    filepath: 'tests/agent-test.js',
    line: 168,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"findAll","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledwith","range":[25,35]},"computed":false,"range":[7,35]},"arguments":[{"type":"StringLiteral","value":"miguel","range":[36,44]}],"range":[7,45]},{"type":"StringLiteral","value":"findAll should be called with usernameArgs","range":[47,91]}],"range":[0,92]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"findAll","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledwith","range":[25,35]},{"type":{"label":"("},"range":[35,36]},{"type":{"label":"string"},"value":"miguel","range":[36,44]},{"type":{"label":")"},"range":[44,45]},{"type":{"label":","},"range":[45,46]},{"type":{"label":"string"},"value":"findAll should be called with usernameArgs","range":[47,91]},{"type":{"label":")"},"range":[91,92]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called with usernameArgs');

  t.is(agents.length, agentFixtures.miguel.length, 'agents should be the same');
  t.deepEqual(agents, agentFixtures.miguel, 'agents should be the same');
});
//# sourceMappingURL=/var/www/html/platziverse/platziverse-db/node_modules/.cache/ava/bfa1339b1c192a93bddbbe4fd77e8cb6.js.map