{"version":3,"sources":["agent-test.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","id","single","Object","assign","AgentStub","db","sandbox","beforeEach","createSandbox","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","findById","deepEqual","byId"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;AACA,MAAMG,gBAAgBH,QAAQ,kBAAR,CAAtB;;AAEA,IAAII,SAAS;AACXC,WAAS,YAAY,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AACfC,aAAWN,MAAMO,GAAN;AADI,CAAjB;;AAIA,IAAIC,KAAK,CAAT;AACA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBT,cAAcO,MAAhC,CAAb;AACA,IAAIG,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAhB,KAAKiB,UAAL,CAAgB,YAAY;AAC1BD,YAAUd,MAAMgB,aAAN,EAAV;AACAJ,cAAY;AACVK,aAASH,QAAQP,GAAR;AADC,GAAZ;;AAIA,QAAMW,gBAAgBjB,WAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAMW,SADc;AAEtC,uBAAmB,MAAMP;AAFa,GAAlB,CAAtB;AAIAQ,OAAK,MAAMK,cAAcf,MAAd,CAAX;AACD,CAXD;;AAaAL,KAAKqB,SAAL,CAAe,MAAM;AACnBL,aAAWA,QAAQM,OAAR,EAAX;AACD,CAFD;;AAIAtB,KAAK,OAAL,EAAcuB,KAAK;AAAA;;AACjBA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB;AACD,CAFD;;AAIAzB,KAAK0B,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACxBA,IAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,iCAAjC;AACAL,IAAEI,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6BtB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,oCAAjD;AACAgB,IAAEI,IAAF,yBAAO,iEAAWnB,SAAX,wBAAqBoB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,oCAApC;AACAL,IAAEI,IAAF,yBAAO,wEAAWnB,SAAX,+BAAqBqB,UAArB,aAAgCf,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,mCAAnD;AACD,CALD;;AAOAd,KAAK0B,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AACvC,MAAIO,QAAQ,MAAMf,GAAGU,KAAH,CAASM,QAAT,CAAkBrB,EAAlB,CAAlB;;AAEAa,IAAES,SAAF,CAAYF,KAAZ,EAAmB1B,cAAc6B,IAAd,CAAmBvB,EAAnB,CAAnB,EAA2C,oBAA3C;AACD,CAJD","file":"agent-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n  logging: function () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet id = 1\nlet single = Object.assign({}, agentFixtures.single)\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.HasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the Metricmodel')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the Agentmodel')\n})\n\ntest.serial('Agent#findById', async t => {\n  let agent = await db.Agent.findById(id)\n\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\n})\n"]}