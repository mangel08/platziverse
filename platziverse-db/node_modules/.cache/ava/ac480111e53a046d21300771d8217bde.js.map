{"version":3,"sources":["metric-test.js"],"names":["test","require","sinon","proxyquire","metricFixtures","agentFixtures","config","logging","uuid","type","MetricStub","AgentStub","db","sandbox","uuidArgs","where","metricUuidArgs","attributes","group","include","model","raw","typeUuidArgs","limit","order","newMetric","agentId","value","beforeEach","createSandbox","belongsTo","spy","hasMany","findOne","stub","withArgs","returns","Promise","resolve","byUuid","create","toJSON","setupDatabase","afterEach","restore","t","truthy","Metric","Agent","serial","true","called","calledWith","metric","calledOnce","deepEqual"],"mappings":"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","file":"metric-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst metricFixtures = require('./fixtures/metric')\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n  logging: function () { }\n}\n\nlet uuid = 'yyy-yyy-yyy'\nlet type = 'CPU'\nlet MetricStub = null\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\nlet uuidArgs = {\n  where: { uuid }\n}\n\nlet metricUuidArgs = {\n  attributes: ['type'],\n  group: ['type'],\n  include: [{\n    attributes: [],\n    model: AgentStub,\n    where: {\n      uuid\n    }\n  }],\n  raw: true\n}\n\nlet typeUuidArgs = {\n  attributes: ['id', 'type', 'value', 'createdAt'],\n  where: {\n    type\n  },\n  limit: 20,\n  order: [['createdAt', 'DESC']],\n  include: [{\n    attributes: [],\n    model: AgentStub,\n    where: {\n      uuid\n    }\n  }],\n  raw: true\n}\n\nlet newMetric = {\n  agentId: 1,\n  type: 'CPU',\n  value: '18%'\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  MetricStub = {\n    belongsTo: sinon.spy()\n  }\n\n  AgentStub = {\n    hasMany: sinon.spy()\n  }\n\n  // Model Create Stub\n  AgentStub.findOne =sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid))\n\n  MetricStub.create = sandbox.stub()\n  MetricStub.create.withArgs(newMetric).returns(Promise.resolve({ toJSON () { return newMetric } }))\n\n  // Metric FindAll Stub\n  // MetricStub.findAll = sandbox.stub()\n  // MetricStub.findAll.withArgs(AgentStub.uuid).returns(Promise.resolve(metricFixtures.byAgentUuid))\n  // MetricStub.findAll.withArgs(typeArgs).returns(Promise.resolve(metricFixtures.byType))\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Metric', t => {\n  t.truthy(db.Metric, 'Metric service should exist')\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.HasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the Metricmodel')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the Agentmodel')\n})\n\ntest.serial('Metric#Create', async t => {\n  let metric = await db.Metric.create(uuid, newMetric)\n  t.true(AgentStub.findOne.called, 'findOne should be called on AgentModel')\n  t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\n  t.true(AgentStub.findOne.calledWith(uuidArgs), 'findOne should be called with uuidArgs')\n  t.true(MetricStub.create.called, 'create should be called on model')\n  t.true(MetricStub.create.calledOnce, 'create should be called once')\n  t.true(MetricStub.create.calledWith(newMetric), 'create should be called with args newAgent')\n\n  t.deepEqual(metric, newMetric, 'metric should be the same')\n})\n"]}