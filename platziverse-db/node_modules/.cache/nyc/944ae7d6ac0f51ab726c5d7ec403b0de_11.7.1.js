'use strict';var cov_275xw46ngz=function(){var path='/var/www/html/platziverse/platziverse-db/index.js',hash='5ab0d303c0cd882d83abcf1be4ad9a6c6d0a63c4',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/var/www/html/platziverse/platziverse-db/index.js',statementMap:{'0':{start:{line:3,column:22},end:{line:3,column:41}},'1':{start:{line:4,column:24},end:{line:4,column:49}},'2':{start:{line:5,column:25},end:{line:5,column:51}},'3':{start:{line:6,column:19},end:{line:6,column:41}},'4':{start:{line:7,column:17},end:{line:7,column:36}},'5':{start:{line:9,column:0},end:{line:44,column:1}},'6':{start:{line:10,column:2},end:{line:20,column:4}},'7':{start:{line:22,column:20},end:{line:22,column:41}},'8':{start:{line:23,column:21},end:{line:23,column:44}},'9':{start:{line:24,column:22},end:{line:24,column:46}},'10':{start:{line:27,column:2},end:{line:27,column:33}},'11':{start:{line:29,column:2},end:{line:29,column:35}},'12':{start:{line:31,column:2},end:{line:31,column:32}},'13':{start:{line:33,column:2},end:{line:35,column:3}},'14':{start:{line:34,column:4},end:{line:34,column:39}},'15':{start:{line:37,column:16},end:{line:37,column:38}},'16':{start:{line:38,column:17},end:{line:38,column:19}},'17':{start:{line:40,column:2},end:{line:43,column:3}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:9,column:17},end:{line:9,column:18}},loc:{start:{line:9,column:41},end:{line:44,column:1}},line:9}},branchMap:{'0':{loc:{start:{line:33,column:2},end:{line:35,column:3}},type:'if',locations:[{start:{line:33,column:2},end:{line:35,column:3}},{start:{line:33,column:2},end:{line:35,column:3}}],line:33}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0},f:{'0':0},b:{'0':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const setupDatabase=(cov_275xw46ngz.s[0]++,require('./lib/db'));const setupAgentModel=(cov_275xw46ngz.s[1]++,require('./models/agent'));const setupMetricModel=(cov_275xw46ngz.s[2]++,require('./models/metric'));const setupAgent=(cov_275xw46ngz.s[3]++,require('./lib/agent'));const defaults=(cov_275xw46ngz.s[4]++,require('defaults'));cov_275xw46ngz.s[5]++;module.exports=async function(config){cov_275xw46ngz.f[0]++;cov_275xw46ngz.s[6]++;config=defaults(config,{dialect:'sqlite',pool:{max:10,min:0,idle:10000},query:{raw:true}});const sequelize=(cov_275xw46ngz.s[7]++,setupDatabase(config));const AgentModel=(cov_275xw46ngz.s[8]++,setupAgentModel(config));const MetricModel=(cov_275xw46ngz.s[9]++,setupMetricModel(config));// Un Agente tiene muchas Metricas
cov_275xw46ngz.s[10]++;AgentModel.hasMany(MetricModel);// Una Metrica pertenece a un Agente
cov_275xw46ngz.s[11]++;MetricModel.belongsTo(AgentModel);cov_275xw46ngz.s[12]++;await sequelize.authenticate();cov_275xw46ngz.s[13]++;if(config.setup){cov_275xw46ngz.b[0][0]++;cov_275xw46ngz.s[14]++;await sequelize.sync({force:true});}else{cov_275xw46ngz.b[0][1]++;}const Agent=(cov_275xw46ngz.s[15]++,setupAgent(AgentModel));const Metric=(cov_275xw46ngz.s[16]++,{});cov_275xw46ngz.s[17]++;return{Agent,Metric};};